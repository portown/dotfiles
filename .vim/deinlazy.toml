# Unite

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'osyo-manga/unite-filters-collection'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'unite-filters-collection']
hook_add = 'source ~/.vim/rc/plugins/unite.vim'
hook_source = 'source ~/.vim/rc/plugins/unite_on_source.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
hook_add = 'source ~/.vim/rc/plugins/denite.vim'
hook_source = 'source ~/.vim/rc/plugins/denite_on_source.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
depends = 'unite.vim'
on_source = 'unite.vim'

# Language

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp', 'objcpp']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_path = '\.md$'
hook_source = '''
    let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'vim-scripts/groovyindent'
on_ft = ['groovy']

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']
hook_add = '''
    let g:haskell_conceal = 0
'''

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']
if = 'executable("ghc-mod")'
hook_add = '''
    autocmd BufWritePost *.hs GhcModCheckAndLintAsync
'''

[[plugins]]
repo = 'honza/dockerfile.vim'
on_path = 'Dockerfile$'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
    let g:vim_json_syntax_conceal = 0
'''

# Completions

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neocomplete'
depends = 'context_filetype.vim'
on_i = 1
if = 'has("lua")'
hook_source = 'source ~/.vim/rc/plugins/neocomplete.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
if = 'has("nvim")'
hook_source = 'source ~/.vim/rc/plugins/deoplete.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = 'context_filetype.vim'
on_i = 1
on_ft = 'snippet'
on_source = 'unite.vim'
hook_add = 'source ~/.vim/rc/plugins/neosnippet.vim'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
if = 'executable("ghc-mod")'
hook_add = '''
    let g:necoghc_enable_detailed_browse = 1
'''

# Others

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_i = 1

[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'
on_path = '.*'

[[plugins]]
repo = 'Yggdroot/indentLine'
on_path = '.*'

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile', 'AgitGit', 'AgitDiff']
hook_add = '''
    let g:agit_enable_auto_show_commit = 0
    let g:agit_enable_auto_refresh = 0
    let g:agit_max_log_lines = 120

    nnoremap <SID>[agit] <Nop>
    nmap <SID>[git]v <SID>[agit]
    nnoremap <silent> <SID>[agit]v :<C-U>Agit<CR>
    nnoremap <silent> <SID>[agit]f :<C-U>AgitFile<CR>

    autocmd Portown filetype agit nnoremap <buffer> git :<C-U>AgitGit 
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
hook_source = '''
    call smartinput#map_to_trigger("i", "<Plug>(smartinput_CR)", "<CR>", "<CR>")
    call smartinput#map_to_trigger("i", "<Plug>(smartinput_C-H)", "<BS>", "<C-H>")

    " for m4
    call smartinput#define_rule({
                \   "at": "\%#",
                \   "char": "`",
                \   "input": "`'<Left>",
                \   "filetype": ["m4"],
                \ })
    call smartinput#define_rule({
                \   "at": "`\%#'",
                \   "char": "'",
                \   "input": "<Right>",
                \   "filetype": ["m4"],
                \ })
    call smartinput#define_rule({
                \   "at": "`\%#'",
                \   "char": "<BS>",
                \   "input": "<Del><BS>",
                \   "filetype": ["m4"],
                \ })
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
on_ft = '.*'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
hook_source = '''
    let g:quickrun_config = {}

    let g:quickrun_config._ = {
                \       "outputter": "error",
                \       "outputter/error/success": "buffer",
                \       "outputter/error/error": "quickfix",
                \   }

    if has('job')
        let g:quickrun_config._.runner = 'job'
    else
        let g:quickrun_config._.runner = 'vimproc'
        let g:quickrun_config._['runner/vimproc/updatetime'] = 60
    endif

    let g:quickrun_config.haskell = {
                \       "command": "runghc",
                \   }
    if IsWindows()
        let g:quickrun_config.haskell["hook/output_encode/encoding"] = "cp932"
    endif

    let g:quickrun_config.ruby = {
                \       "command": "ruby",
                \   }
'''

[[plugins]]
repo = 'thinca/vim-template'
on_path = '.*'

[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = 'Gita'
hook_add = '''
    nnoremap <SID>[git] <Nop>
    nmap <Space>g <SID>[git]
    nnoremap <SID>[git]d :<C-U>Gita patch<CR>
    nnoremap <SID>[git]s :<C-U>Gita status<CR>
    nnoremap <SID>[git]b :<C-U>Gita blame<CR>
    nnoremap <SID>[git]r :<C-U>Gita branch --all<CR>
'''
