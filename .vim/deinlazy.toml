# Unite

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'osyo-manga/unite-filters-collection'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'unite-filters-collection']
hook_add = 'source ~/.vim/rc/plugins/unite.vim'
hook_source = 'source ~/.vim/rc/plugins/unite_on_source.vim'

[[plugins]]
repo = 'thinca/vim-unite-history'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-ssh'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'ryotakato/unite-outline-objc'
depends = ['unite.vim', 'unite-outline']
on_ft = 'objc'

[[plugins]]
repo = 'hewes/unite-gtags'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-build'
depends = 'unite.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-ref'
depends = 'unite.vim'
on_source = 'unite.vim'
hook_add = '''
    autocmd Portown FileType ref-webdict nnoremap <buffer> q <C-W>c
'''
hook_source = '''
    let g:ref_source_webdict_sites = {
                \   "wikipedia:ja": {
                \     "url": "http://ja.wikipedia.org/wiki/%s",
                \     "keyword_encoding": "utf-8",
                \     "cache": 1,
                \   },
                \   "wiktionary": {
                \     "url": "http://ja.wiktionary.org/wiki/%s",
                \     "keyword_encoding": "utf-8",
                \     "cache": 1,
                \   },
                \ }
    function! g:ref_source_webdict_sites.wiktionary.filter(output)
        return join(split(a:output, "\n")[18 :], "\n")
    endfunction

    let g:ref_source_webdict_sites.default = "wiktionary"
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
depends = 'unite.vim'
on_source = 'unite.vim'

# Language

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp', 'objcpp']

[[plugins]]
repo = 'tpope/vim-haml'
on_path = '\.haml$'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_path = '\.coffee$'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_path = '\.md$'

[[plugins]]
repo = 'aklt/plantuml-syntax'
on_path = '\.p\%(lant\)\?uml$'

[[plugins]]
repo = 'vim-scripts/scons.vim'
on_path = 'SConstruct$'

[[plugins]]
repo = 'ebnf.vim'
on_path = '\.ebnf$'

[[plugins]]
repo = 'timcharper/textile.vim'
on_path = '\.textile$'

[[plugins]]
repo = 'jam.vim'
on_path = '\%(\.jam\|Jamfile\|Jamroot\)$'

[[plugins]]
repo = 'groovyindent'
on_ft = ['groovy']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']
hook_add = '''
    let g:haskell_conceal = 0
'''

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'honza/dockerfile.vim'
on_path = 'Dockerfile$'

#[[plugins]]
#repo = 'https://fedorapeople.org/cgit/wwoods/public_git/vim-scripts.git'
#on_path = '\%(\.service\)$'

[[plugins]]
repo = 'jvoorhis/coq.vim'
on_path = '\.v$'

#[[plugins]]
#repo = 'vim-scripts/CoqIDE'
#on_ft = ['coq']

[[plugins]]
repo = 'PProvost/vim-ps1'
on_path = '\.ps1$'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
    let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'b4winckler/vim-objc'
on_ft = ['objc', 'objcpp']
if = 'IsMac()'

[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'
if = 'IsMac()'

# Completions

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neocomplete'
depends = 'context_filetype.vim'
on_i = 1
if = 'has("lua")'
hook_source = 'source ~/.vim/rc/plugins/neocomplete.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
if = 'has("nvim")'
hook_source = 'source ~/.vim/rc/plugins/deoplete.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = 'context_filetype.vim'
on_i = 1
on_ft = 'snippet'
on_source = 'unite.vim'
hook_add = 'source ~/.vim/rc/plugins/neosnippet.vim'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
if = 'executable("ghc-mod")'

[[plugins]]
repo = 'Rip-Rip/clang_complete'
depends = 'clang_complete-getopts-ios'
on_ft = ['objc', 'objcpp']
if = 'IsMac()'
hook_add = '''
    let g:clang_complete_auto = 0
    let g:clang_auto_select = 0
    let g:clang_close_preview = 1
'''

[[plugins]]
repo = 'tokorom/clang_complete-getopts-ios'
if = 'IsMac()'

# Others

[[plugins]]
repo = 'itchyny/landscape.vim'
# Because of confliction against syntax/unite.vim in unite.vim,
# it must be loaded lazily.
# (Lazy plugins aren't cached in .dein directory)

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_i = 1

[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/vimshell'
on_cmd = ['VimShellCurrentDir']
depends = ['vimproc']
hook_add = '''
    command! PortownVimShellSplit :topleft 10split

    nnoremap <SID>[vimshell] <Nop>
    nmap <Space>s <SID>[vimshell]
    nnoremap <silent> <SID>[vimshell]s :<C-U>VimShellCurrentDir -buffer-name=shell -toggle -split -split-command=PortownVimShellSplit<CR>
    nnoremap <silent> <SID>[vimshell]f :<C-U>VimShellCurrentDir -buffer-name=shell<CR>

    autocmd Portown FileType vimshell execute "nunmap <buffer> <C-N>" | nunmap <buffer> <C-P>
'''
hook_source = '''
    if IsWindows()
        let g:vimshell_prompt = $USERNAME."@".hostname()."$ "
    else
        let g:vimshell_prompt = $USER."$ "
    endif
'''

[[plugins]]
repo = 'ujihisa/vimshell-ssh'
on_cmd = ['VimShellCurrentDir']
depends = ['vimshell']

[[plugins]]
repo = 'Shougo/vimfiler'
on_cmd = ['VimFilerBufferDir']
depends = ['unite.vim']
hook_add = '''
    nnoremap <SID>[vimfiler] <Nop>
    nmap <Space>f <SID>[vimfiler]
    nnoremap <silent> <SID>[vimfiler]e :<C-U>VimFilerBufferDir -buffer-name=explorer -direction=topleft -toggle -split -simple -winwidth=35 -no-quit<CR>
    nnoremap <silent> <SID>[vimfiler]f :<C-U>VimFilerBufferDir -buffer-name=explorer<CR>
    nnoremap <silent> <SID>[vimfiler]d :<C-U>VimFilerBufferDir -double<CR>
'''
hook_source = '''
    let g:vimfiler_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'thinca/vim-logcat'
on_cmd = ['Logcat', 'Logcat!', 'LogcatClear']
on_ft = 'logcat'
on_path = '\.logcat$'
if = 'executable("adb")'

[[plugins]]
repo = 'Yggdroot/indentLine'
on_path = '.*'

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile', 'AgitGit', 'AgitDiff']
hook_add = '''
    let g:agit_enable_auto_show_commit = 0
    let g:agit_enable_auto_refresh = 0
    let g:agit_max_log_lines = 120

    nnoremap <SID>[agit] <Nop>
    nmap <SID>[git]v <SID>[agit]
    nnoremap <silent> <SID>[agit]v :<C-U>Agit<CR>
    nnoremap <silent> <SID>[agit]f :<C-U>AgitFile<CR>

    autocmd Portown filetype agit nnoremap <buffer> git :<C-U>AgitGit 
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
hook_source = '''
    call smartinput#map_to_trigger("i", "<Plug>(smartinput_CR)", "<CR>", "<CR>")
    call smartinput#map_to_trigger("i", "<Plug>(smartinput_C-H)", "<BS>", "<C-H>")

    " for m4
    call smartinput#define_rule({
                \   "at": "\%#",
                \   "char": "`",
                \   "input": "`'<Left>",
                \   "filetype": ["m4"],
                \ })
    call smartinput#define_rule({
                \   "at": "`\%#'",
                \   "char": "'",
                \   "input": "<Right>",
                \   "filetype": ["m4"],
                \ })
    call smartinput#define_rule({
                \   "at": "`\%#'",
                \   "char": "<BS>",
                \   "input": "<Del><BS>",
                \   "filetype": ["m4"],
                \ })
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
on_ft = '.*'
on_source = 'unite.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
hook_source = '''
    let g:quickrun_config = {}

    let g:quickrun_config._ = {
                \       "runner": "vimproc",
                \       "runner/vimproc/updatetime": 60,
                \       "outputter": "error",
                \       "outputter/error/success": "buffer",
                \       "outputter/error/error": "quickfix",
                \   }

    let g:quickrun_config.haskell = {
                \       "command": "runghc",
                \   }
    if IsWindows()
        let g:quickrun_config.haskell["hook/output_encode/encoding"] = "cp932"
    endif

    let g:quickrun_config.ruby = {
                \       "command": "ruby",
                \   }
'''

[[plugins]]
repo = 'thinca/vim-template'
on_path = '.*'

[[plugins]]
repo = 'fuenor/qfixgrep'

[[plugins]]
repo = 'fuenor/qfixhowm'
depends = 'qfixgrep'
pre_cmd = 'QFix'
on_ft = 'markdown'
hook_add = '''
    let howm_dir = "~/howm"
    let howm_filename = "%Y/%m/%Y-%m-%d-%H%M%S.md"
    let QFixHowm_RootDir = howm_dir
    let QFixHowm_FileType = "qfix_memo"
    let QFixHowm_Title = "#"
    let QFixMRU_Title = {}
    let QFixMRU_Title["md"] = "^#[^#]"
    let QFixHowm_HolidayFile = $HOME . "/.vim/bundle/qfixhowm/misc/holiday/Sche-Hd-0000-00-00-000000.utf8"

    let QFixHowm_ScheduleSearchDir = howm_dir . "/schedule"
    let QFixHowm_ScheduleSearchFile = ""
'''

[[plugins]]
repo = 'lambdalisue/vim-gita'
on_cmd = 'Gita'
hook_add = '''
    nnoremap <SID>[git] <Nop>
    nmap <Space>g <SID>[git]
    nnoremap <SID>[git]d :<C-U>Gita patch<CR>
    nnoremap <SID>[git]s :<C-U>Gita status<CR>
    nnoremap <SID>[git]b :<C-U>Gita blame<CR>
    nnoremap <SID>[git]r :<C-U>Gita branch --all<CR>
'''
