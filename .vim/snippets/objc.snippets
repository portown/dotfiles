# objc.snippets
# vim:set noexpandtab:

snippet file-header
alias fh
options head
	//
	//  `expand('%:t')`
	//  `fileutil#get_xcode_proj_name(expand('%:h'))`
	//
	${0}

snippet import-user-header
alias imp
options head
	#import "${1:`expand('%:t:r')`}.h"${0}

snippet import-system-header
alias Imp
options head
	#import <${1:Foundation}/${2:$1}.h>${0}

snippet pragma-mark-with-separator
alias prag
options head
	#pragma mark - ${0}

snippet selector
alias sel
options word
	@selector(${1})${0}

snippet class-interface-definition
alias int
options head
	@interface ${1:`expand('%:t:r')`} : ${2:NSObject}

	${0}

	@end

snippet class-implementation-definition
alias impl
options head
	@implementation ${1:`expand('%:t:r')`}

	${0}

	@end

snippet private-category-definition
alias cath
options head
	@interface `expand('%:t:r')` ()

	${0}

	@end

snippet delegate-declaration
alias delegd
options head
	@protocol ${1:`expand('%:t:r')`Delegate};${0}

snippet delegate-definition
alias deleg
	@protocol ${1:`expand('%:t:r')`Delegate} <NSObject${2}>

	${0}

	@end


snippet protocol-definition
alias proto
	@protocol ${1:`expand('%:t:r')`} <NSObject${2}>

	${0}

	@end

snippet property-definition
alias prop
options head
	@property (nonatomic${1:, strong}) ${2:NSObject*} ${3:object};${0}

snippet synchronization-block
alias sync
options head
	@synchronized (${1:self}) {
		${0}
	}

snippet initd
options head
	- (instancetype)init${1};${0}

snippet init
options head
	- (instancetype)init${1}
	{
		self = [super init${2:$1}];
		if (self != nil) {
			${0}
		}

		return self;
	}

snippet md
options head
	- (${1:void})${2};${0}

snippet m
options head
	- (${1:void})${2}
	{
		${0}
	}

snippet MD
options head
	+ (${1:void})${2};${0}

snippet M
options head
	+ (${1:void})${2}
	{
		${0}
	}

snippet sharedd
options head
	+ (instancetype)shared${1:Instance};${0}

snippet shared
options head
	+ (instancetype)shared${1:Instance}
	{
		static ${2:`expand('%:t:r')`}* ${3:instance} = nil;
		static dispatch_once_t onceToken;

		dispatch_once(&onceToken, ^{
			$3 = [[self alloc] init];
		});

		return $3;
	}${0}

snippet o
options head
	${1:NSObject}* const ${2:object} = [[$1 alloc] init${3}];${0}

snippet a
options word
	[[${1:NSObject} alloc] init${2}]${0}

snippet for
options head
	for (${1:NSUInteger} ${2:i} = ${3:0}; ${4:$2 < 10}; ${5:++i}) {
		${0}
	}

snippet forin
options head
	for (${1:NSObject}* ${2:obj} in ${3:container}) {
		${0}
	}
